
SERVER CONFIGURATION IN EXECUTING THE BUILD, TESTING AND PUSH USING MAVEN, SONARQUBE AND NEXUS 

- This section contains all the codes I run and steps I take while configuring the Servers and executing the build, test and upload. 
- Pre-requisite: Launch the servers with all the userdata https://github.com/EngineerChris/maven-sonarqube-nexus-project 

----------------------------
MAVEN SERVER CONFIGURATION

- ssh into maven server
- git clone < project repo --> https://github.com/EngineerChris/maven-sonarqube-nexus-project.git > 
- ls
- cd < repo -->  maven-sonarqube-nexus-project >
- ls
- mnv -v   (we will see mvn is using kava-17)
- sudo /usr/sbin/alternatives --config java      --> # to switch to java 11 inorder not to run into issues as per the proj req and dependencies
- 4
- mvn -v  (confirm mavn is switched to java 11.0...)

----------------------------
switch to the source code root/folder

- cd JavaWebApp      This is where I will be for the entire process
----------------------------

Building Process
- mvn validate
- mvn compile ( you can skip to test )
- mvn test  (unit testing on teh source code using Junit Framework) (run ls --> ls target)
  ls 
  ls target  (all the downloaded packages are found here)
    classes :  
    generated-sources : 
    generated-test-sources :
    maven-status :
    surefire-reports : Stores all the reports based on the Junit test )
    test-classes : 
- mvn package
  ls target
    artifact will show (JavaWebApp-1.0-SNAPSHOT.jar)

----------------------------

  CONFIGURING  SONARQUBE 

  - Go to sonarQube web --> SOnarqubePubIP:9000 --> login (default - admin/admin) --> 
  - Create Project --> < project name: java-web-app-project>
  - TOKEN NAME - Paste Project name [java-web-app-project] as TOKEN name. The TOKEN is how we give maven authorization to SONARQUBE so that SQ API and inteeract with Maven.
     SonarScanner - is the component what the SonarQube uses for the test.
       - Types of Scanners on SQ - Maven Scanner, Gradle Scanner, Ant Scanner, MS Build Scanner. Depending on the Buid tool.
  - Generate --> COPY the TOKEN AND SAVE somewhere --> Continue  
  - Choose JAVA (The application code is based on Java) and choose MAVEN the build tool
  - COPY THE SCANNER API CODE --> Execute Scanner for Maven from your Scanner (mvn sonar:sonar)
     - DEPENDENCY that should be downloaded before the above code can run (i.e before the scanner can run). 
       This has been defined in the POM.XML (Line 19) --> <sonar.scanner.force-depecated... If this line of code is removed the code above cannot run.
  - RUN the COMMAND on Maven Instance [ Ensure you are in the JavaWebApp Directory i.e your project source code root.
  - The SonarQube test will run shows if succeeded

  -----
  Checking the report on SQ
  - Go to SQ Server (Web) --> JavaWebApp project OVERVIEW
  
----------------------------  
NEXUS

- Go to nexus server (web) --> nexus-pubip:8081
- sign in : Provide the password in admin.password file in the /opt/nexus/sonatype-work/nexus3/admin.password
   - COPY /opt/nexus/sonatype-work/nexus3/admin.password
   - Go to Nexus Server ec2
   - sudo cat /opt/nexus/sonatype-work/nexus3/admin.password
   - Copy the password displayed.
   - Username - admin
   - Sign in
   - New username/password : admin/admin
   - Disable Anonymous access so the artifact are not visible to the public
   - finish --> next-nets ill finish 

Understand Nexus COmponents
- Go to Gear (where admin and security confi takes place 
- Got to  Repository : We will see all repos created automatically by default by Nexus during Set up.
  - we will use the "maven-snapshots" Repository - Because it is used for artifacts storage
  - we can also use "maven-relaeases" repository it is also available for artifcats storage.

---------------------------- 
EDIT POM.XML TO DEFINE THE URL PATH OF NEXUS REPO

- Provide ARTIFACTORY PRIVATE IP:PORT, SNAPSHOT_REPO_NAME
This should be down on Local then push to git (Bad Practice to execute this on Github)
This can also be done at the level of the server ***
Question: When updates github repo, thus the same clonned repo in the server also get updated or not


---
FIND THE ARES TO EDIT IN POM.XML
- Go to VScode repo 
  - Click on "JavaWebApp"  --> "POM.XML file" 
  - Go to where Nexus path is defined (line 64 and 68 )
    - <url>http: //ARTIFACTORY_IP_ADDRESS:PORT_NUMBER.......

---
PROVIDE REPOSITORY NAME (that is "maven-snapshots")
- Go to Nexus Web server --> Gear --> Repo --> Repo --> copy "maven-snapshots" repo
- Go to POM.XML and put the Name in both urls sstated (line 64 and 68)
- This means we are tetlling Maven to public artifacts to the that specific nexus repo

---
PROVIDE NEXUS PORT ARTIFACTORY IP AND PORT
Go to Nexus Server (ec2) copy the PrivateIP and PORT (8081)
- NexusPRIVATE-ID:8081
  - PRIVATE because the severs (ec2 instances for Maven, Nexus ) exist in the same networking VPC
  - If you private PRIVATE IP, while the servers exist in different network then you woul need connection like (vpc peering, vpc endpoint etc) to make the connection communication work.
  - Public can work too but remember public ip changes when you stop the servers and come back.
- Provide in both urls lines of the POM.XML file

---
PUSH CHANGES TO Git (consider using Feature Branches) - Or wait till settings.xml is updated as well.
- git add .
- git commit -m "Updating POM.XML"
- git push 

UPDATES THE CHANGES AT THE MAVEN SERVER level
- Pull teh chnages att the Nexus Ec2 server, and the CodeBase Repo i.e JavaWebApp
- < git pull origin main>

---------------------------- 
SETTINGS.XML - FOR AUTHORIZATION PROVISIONING CONFIG FOR MAVEN ACCESS TO NEXUS

*** SETTINGS.XML  ***
- Is an authorization/access file for providing authorization for MAVEN to access other systems/applications e.g  NEXUS 
- Reminder POM.XML vs SETTINGS.XML, while POM.XML is teh brain / configuration file for MAVEN, that tells what MAVEN will do, 
  - SETTINGS.XML, handles the authorization confi provisioning for MAVEN in accessing other ssystems/applications 

***Configuring Settings.XML***

- Provide Username and Password
  - Find the nexus deployment repo id section (line 32 and 33)
  - Update the NEXUS Username and password --> admin / admin

- Provide Nexus arfiactory Private IP:Port, Repository Name (line 63 and 64) (Leave line 86)
  - NexusPrivateIp:8081
  - Nexus-Repo-Name - maven-snapshots

- Push changes
  - git add .
  - git commit -m "Updating POM.XML"
  - git push -u Feature

- Create Pull Request to Merge with main

- Update on the server (Maven ec2)
  - git pull origin main OR just git pull



------------------
PUT SETTINGS.XML IN THE .M2  (DEFAULT LOCATION)

Maven, by default, searches for the configuration file settings.xml in the .m2 directory located in the home directory of the current user executing Maven.
Maven does not search it in the home directory of the project 

- ls
- cd ..  (to swicth to Maven-SonarQube-Nexus Repo)
- ls
- cp settings.xml ~/.m2  --> To copy the settings.xml to the .m2 which contains the Maven Local Repoeitory called "repository"  
  - .M2 is located in the home directory of the current user that is executing maven. 
- ls ~/.m2  (to cofirm that the settings.xml is in the .m2 folder). In the .m2, You should now find "repository" and "settings.xml"
  - Where is repository located in maven server. 
    - The local repository in Maven is located in the .m2 directory within the home directory of the user executing Maven. The default path for the local repository is .m2/repository

Local repository
- The local repository is a directory on the user's local machine where Maven stores all the project artifacts (e.g., dependencies, plugins) that it downloads. 
- By default, this is located in the .m2/repository directory.

Default .m2 and repository Location:
- The .m2 directory is typically found in the user's home directory:
  - Linux/Mac: /home/username/.m2/repository
  - Windows: C:\Users\username\.m2\repository

Repository Configuration:
- The location of the local repository can be configured in the settings.xml file, which is also found in the .m2 directory. 
- If not configured, Maven uses the default location.

------------------

GO BACK TO APP CODE BASE - JavaWebApp
- cd JavaWebApp

---
DEPLOY ARTIFACTS TO NEXUS 
- mvn deploy

VIEW UPLOADED ARTIFACTS 
- Go to nexus web server --> the box  (not gear) --> browse --> maven-snapshots
